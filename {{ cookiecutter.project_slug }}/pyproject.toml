[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
description = "{{ cookiecutter.project_name }} FastAPI project"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "fastapi==0.115.12",
    "uvicorn[standard]==0.29.0",
    "sqlalchemy[asyncio]==2.0.41",
    "aiosqlite==0.20.0",
    "fastapi-utils==0.8.0",
    "python-dotenv==1.0.1",
    "typing-inspect==0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.1",
    "pytest-asyncio==1.0.0",
    "httpx==0.27.0",
    "pre-commit==3.7.1",
    "ruff==0.12.2", # Added Ruff
    "pytest-cov==5.0.0", # Updated, no longer '^' for uv
]

[tool.ruff]
line-length = 100
target-version = "py312"
select = [ # Add the linting rules you want. This is a common set that covers flake8, isort, autoflake, etc.
    "E",   # Error
    "W",   # Warning
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle (optional, can be noisy)
    "UP",  # pyupgrade
    "A",   # builtins (flake8-builtins)
    "B",   # bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "PT",  # pytest-style
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "ANN", # flake8-annotations (optional, can be noisy)
    "ARG", # flake8-unused-arguments (optional, can be noisy)
    "BLE", # flake8-blind-except
    "C90", # mccabe (complexity)
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PERF",# perflint
    "RUF", # ruff-specific rules
    "SLF", # flake8-self
    "TID", # flake8-tidy-imports
    "INT", # flake8-gettext
]
ignore = [ # Ignore rules that might conflict with your style or be too strict for now
    "E203",  # Black conflict: whitespace before ':'
    "W503",  # Black conflict: line break before binary operator
    # "D100", # Example: Ignore missing docstrings in modules (if you don't enforce them everywhere)
]

[tool.ruff.lint]
# Specific linting settings if needed
# For example, to adjust "isort" behavior within ruff:
# src = ["src"] # if your code is in a `src` directory

[tool.ruff.format]
# Enable consistent single quotes for strings.
quote-style = "single"
# Trailing commas can improve git diffs for multiline lists.
trailing-comma = "all"
# Respect line length from `[tool.ruff]`.
# indent-style = "space" # Default is space
# indent-width = 4     # Default is 4

[tool.pytest.ini_options]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
addopts = "--strict-markers --cov=. --cov-report=term-missing --cov-report=html --cov-fail-under=100"

# --- Coverage.py Configuration ---
[tool.coverage.run]
source = [
    ".",
]
omit = [
    "tests/*",
    "venv/*",
    "*/__init__.py",
    "alembic/*",
    "**/__main__.py",
    "main.py",
    "database/*",
]

[tool.coverage.report]
fail_under = 100
show_missing = true

# Exclude lines that are generally untestable or known coverage.py quirks.
exclude_lines = [
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
